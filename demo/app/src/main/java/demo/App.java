/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import java.io.IOException;
import java.util.*;

public class App {


    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        List<String> input = new ArrayList<>();
        Set<String> portsSet = new HashSet<>();
        boolean isConnected = false;


        for (String arg : args) {
            System.out.println("Got argument [" + arg + "]");
            input.add(arg);
        }

        // 1. make server with given port
        Server.setUpServerSocket(Integer.parseInt(args[0].trim()));

        while (true) {

            String receivedCommand = scanner.nextLine();
            List<String> userInput = List.of(receivedCommand.split(" "));

            if (userInput.get(0).contains("**")) {
                System.out.println("Server is terminated");
                Server.tearDownConnection();
                break;
            }

            System.out.println(userInput);
            String command =  userInput.get(0).trim();
            while (!command.equals("con") && !isConnected) {

                //Should be connected first before sending or replying
                System.out.println("Should be connected first before sending or replying!");

                receivedCommand = scanner.nextLine();
                System.out.println(receivedCommand);
                userInput = List.of(receivedCommand.split(" "));
                if (userInput.get(0).equals("con")) {
                    isConnected = true;
                    break;
                }

            }
            if (userInput.get(0).equals("con")) {

                Client.setUpClientServer(userInput.get(1).trim(),Integer.parseInt(userInput.get(2).trim()));
                Server.acceptConnection();
                Client.initializeWriter();
                Client.initializeClientReader();
                Server.initializeClientReader();
                Server.initializeWriter();
                System.out.println("Client is connected ");

            } else if (userInput.get(0).equals("send")) {
                Client.sendMessage(userInput.get(1));
                System.out.println("Server received: "+Server.in.readLine());

            } else if (userInput.get(0).equals("reply")) {
                Server.sendMessage(userInput.get(1));
                System.out.println("Client received: "+Client.in.readLine());

            } else if (userInput.get(0).equals("close")) {
                System.out.println("Client is terminated");
                Client.tearDownConnection();
                break;
            } else {
                System.out.println("Invalid Command !");
            }
        }
    }
}


