/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import java.io.IOException;
import java.util.*;

public class App {


    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        List<String> input = new ArrayList<>();
        Set<String> portsSet = new HashSet<>();
        boolean isConnected = false;


        for (String arg : args) {
            System.out.println("Got argument [" + arg + "]");
            input.add(arg);
        }

        // 1. make server with given port
        System.out.println(input.toString());
        Server.setUpServerSocket(Integer.parseInt(input.get(0)));

        // 2. receive command connect

        while (true) {

            String receivedCommand = scanner.next();
            List<String> userInput = List.of(receivedCommand.split(" "));

            if (userInput.get(0).contains("**")) {
                System.out.println("Server is terminated");
                Server.tearDownConnection();
                break;
            }

            System.out.println("lol");

            while (!userInput.get(0).equalsIgnoreCase("con") && !isConnected) {

                //Should be connected first before sending or replying
                System.out.println("Should be connected first before sending or replying!");

                if (userInput.get(0).equalsIgnoreCase("con")) {
                    isConnected = true;
                    break;
                }

            }
            //Note - > can't connect more than one client on the same port number
            while (userInput.get(0).equalsIgnoreCase("con")) {

                String host = userInput.get(1); // host
                String port = userInput.get(2); //port

                if (portsSet.contains(port)) {
                    System.out.println("This port is busy, try another port ");

                    receivedCommand = scanner.next();
                    userInput = List.of(receivedCommand.split(" "));

                } else {
                    portsSet.add(port);

                    Server.acceptConnection();
                    Server.initializeClientReader();
                    Server.initializeWriter();

                    Client.setUpClientServer(host, Integer.parseInt(port));
                    Client.initializeClientReader();
                    Client.initializeWriter();
                    System.out.println("Client is connected");
                    break;
                }
            }
            if (userInput.get(0).equals("send")) {
                Client.sendMessage(userInput.subList(1, userInput.size()).toString());

            } else if (userInput.get(0).equals("reply")) {
                Server.sendMessage(userInput.subList(1, userInput.size()).toString());
            }else if(userInput.get(0).equals("close")){
                System.out.println("Client is terminated");
                Client.tearDownConnection();
                break;
            }else{
                System.out.println("Invalid Command !");
            }
        }
    }
}


